name: Production CI/CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  # pull_request:
  #   branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NODE_VERSION: '16.x' 

jobs:
  deployment:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install
        run: npm install
      - name: Lint
        run: npm run lint --if-present
      - name: Test
        run: npm run test --if-present
      - name: Build
        run: npm run build
      - name: Export
        run: npm run export
          
  # deploy:
  #   name: Deploy
  #   environment: Production
  #   needs: build
  #   runs-on: [ ubuntu-latest ]

  #   steps:
  #     - id: "setup"
  #       name: "Setup"
  #       run: |
  #         echo "${{ secrets.SSH_RSA_KEY }}" > ssh_key.temp
  #         chmod 600 ssh_key.temp
          
  #     - id: "deploy"
  #       name: "Checkout New Version"
  #       run: |
  #         echo "#!/bin/bash" > command.sh.temp
  #         echo "cd ${{ secrets.PROJECT_PATH }}" >> command.sh.temp
  #         echo "sudo git fetch origin" >> command.sh.temp
  #         echo "sudo git reset --hard origin/main" >> command.sh.temp
  #         echo "sudo git pull" >> command.sh.temp
  #         ssh ${{ secrets.HOST }} -p ${{ secrets.PORT }} -l ${{ secrets.USERNAME }} -i ssh_key.temp -o "StrictHostKeyChecking=no" < command.sh.temp
  #         rm command.sh.temp

  #     - id: "install"
  #       name: "Install / Deploy New Version"
  #       run: |
  #         echo "#!/bin/bash" > command.sh.temp
  #         echo "cd ${{ secrets.PROJECT_PATH }}" >> command.sh.temp
  #         echo "sudo npm install" >> command.sh.temp
  #         echo "sudo npm run build && sudo systemctl restart ${{ secrets.SERVICE_NAME }}" >> command.sh.temp
  #         ssh ${{ secrets.HOST }} -p ${{ secrets.PORT }} -l ${{ secrets.USERNAME }} -i ssh_key.temp -o "StrictHostKeyChecking=no" < command.sh.temp
  #         rm command.sh.temp

  #     - id: "cleanup"
  #       name: "Cleanup"
  #       run: |
  #         rm ssh_key.temp