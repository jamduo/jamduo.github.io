name: Production CI/CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  # pull_request:
  #   branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NODE_VERSION: '16.x' 

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - id: npm-cache-dir
        name: Get npm cache directory
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - id: install
        name: Install
        run: npm install
      - id: lint
        name: Lint
        run: npm run lint --if-present
      - id: test
        name: Test
        run: npm run test --if-present
      - id: 
        name: Build
        run: npm run build
      - name: Export
        run: npm run export
          
  deploy:
    name: Deploy
    environment: Production
    needs: build
    runs-on: [ ubuntu-latest ]

    steps:
      - id: "setup"
        name: "Setup"
        run: |
          echo "${{ secrets.SSH_RSA_KEY }}" > ssh_key.temp
          chmod 600 ssh_key.temp
          
      - id: "deploy"
        name: "Checkout, Build and Install the New Version"
        run: |
          echo "#!/bin/bash
            cd ${{ secrets.PROJECT_PATH }}
            git fetch origin
            git reset --hard origin/main
            git pull
            npm install
            npm run build 
            npm run export
          " > command.sh.temp
          ssh ${{ secrets.HOST }} -p ${{ secrets.PORT }} -l ${{ secrets.USERNAME }} -i ssh_key.temp -o "StrictHostKeyChecking=no" < command.sh.temp
          rm command.sh.temp

      - id: "cleanup"
        name: "Cleanup"
        run: |
          rm ssh_key.temp